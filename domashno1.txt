object upr{
  
class upr 

def main(args: Array[String]): Unit = {
  
//def length
  var myList : List[Int] = List(11,22,33,44,55)
  println("Length of List is: " + (length(myList)))

//def ifelse
  val cond : Boolean = true
  println("onTrue: " + ifelse(cond,4,5))
  
//def balance
  var otherList : List[Char] = List('a','(',')','(','w','f',')','g','(','t','(','(','e','v',')',')',')')
  println("Is balanced: " + (balance(otherList)))
  
//def toUpperCase
  var anotherList : List[Char] = List('a','w','f','g','t','e','v')
  println("to upper case: " + (toUpperCase(anotherList)))
  
//def exist
  var intList : List[Int] = List(11,22,33,44,55)
  println("Is exists: " + (exist(intList,f => true)))
  
//def filter
  var filterList : List[Int] = List(44,44,44)
  println("Exists: " + (filter(filterList,f => true)))
  
//def pascal
  println("Side3: " + (pascal(5,7)))
}

// Връща големината на масив (без да ползва data.length!!!)

def length(data: List[Int]): Int = {
  
    def lengthTask(data: List[Int], flag: Int): Int = {
      if (data.isEmpty) flag;
      else lengthTask(data.tail, flag + 1);
    }    
    lengthTask(data, 0);
  }

// Ако cond е true връща onTrue

def ifelse(cond: Boolean, onTrue: => Int, onFalse: => Int) = {
  
    if (cond) onTrue else onFalse;
 }

// Проверява дали скобите в даден масив от символи са балансирани.
  // Коректно: (a)asda(b)(v) | (((a))) | ()(()асдасд)
  // Грешно: )() | ((д) | ((das) (d)(

def balance(chars: List[Char]): Boolean = {
  
    def balanced(chars: List[Char], open: Int): Boolean = {
        if (chars.isEmpty) open == 0
            else
                if (chars.head == '(') balanced(chars.tail,open+1)        
                else
                    if (chars.head == ')') open>0 && balanced(chars.tail,open-1)
                    else balanced(chars.tail,open)
    }      
    balanced(chars,0)
 }

def map(chars: List[Char], f: (Char) => Any) = {
  
    def mapTask(chars: List[Char], f: (Char) => Any, mapBy: List[Any]): List[Any] = {
        if (chars.isEmpty) mapBy;
          else {
            mapTask(chars.tail, f, mapBy :+ f(chars.head));
          }
       }
    mapTask(chars, f, List());
 }

def toUpperCase(chars: List[Char]) = {
  
    def toUpperCaseTask(chars: Char) = {
      // Check for lower case letter
      if(chars >= 97 && chars <= 122) (chars - 32).toChar
      else chars
 }

// Проверява дали съществува елемент отговарящ на f

def exist(data: List[Int], f: (Int) => Boolean): Boolean = {
  
    if (data.isEmpty) false;
      else if (f(data.head)) true; 
        else exist(data.tail, f);
 }

// Връща масив съдържащ само елементите отговарящи на f

def filter(data: List[Int], f: (Int) => Boolean) = {
  
    def filterTask(data: List[Int], f: (Int) => Boolean, filterBy: List[Int]): List[Int] = {
      if (data.isEmpty) filterBy;
      else { 
        if (f(data.head)) filterTask(data.tail, f, filterBy :+ data.head)
        else filterTask(data.tail, f, filterBy);
      }
    }
    filterTask(data, f, List());
 }

// Връща числото от триъгълника на Паскал отговарящо на съответния ред/колона

def pascal(c: Int, r: Int): Int = {
  
    def pascalTask(c: Int, r: Int): Int = {   
      if(c == 0 || c == r) 1;
      else pascalTask(c - 1, r - 1) + pascalTask(c, r - 1);
    }
    
    if(c > r || (c < 0 || r < 0)){
      return -1;
    }
   
    pascalTask(c, r);
  }
}